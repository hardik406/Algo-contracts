{
  "version": 3,
  "sources": [
    "C:/Users/dell/algorandproject1/projects/algorandproject1/smart_contracts/hello_world/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWuC;AAAyB;AAA9D;AACoC;AAAwB;AAA5D;AAFF;;AAAA;;;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;;;AAIE;;AAAA;AAAA;AAAA;;AAAA;AAJF;;;AAAA;;;AAAA;;;AAAA;;;AAIE;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;;AAJF;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;AAIE;;;AAHqC;AAInC;;AAAA;AAHkC;AAIlC;;AAAA;AACO;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "bytecblock \"patient\" \"none\" \"report\""
    },
    "23": {
      "op": "txn ApplicationID",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "25": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "28": {
      "op": "bytec_0 // \"patient\"",
      "defined_out": [
        "\"patient\""
      ],
      "stack_out": [
        "\"patient\""
      ]
    },
    "29": {
      "op": "bytec_1 // \"none\"",
      "defined_out": [
        "\"none\"",
        "\"patient\""
      ],
      "stack_out": [
        "\"patient\"",
        "\"none\""
      ]
    },
    "30": {
      "op": "app_global_put",
      "stack_out": []
    },
    "31": {
      "op": "bytec_2 // \"report\"",
      "defined_out": [
        "\"report\""
      ],
      "stack_out": [
        "\"report\""
      ]
    },
    "32": {
      "op": "bytec_1 // \"none\"",
      "stack_out": [
        "\"report\"",
        "\"none\""
      ]
    },
    "33": {
      "op": "app_global_put",
      "stack_out": []
    },
    "34": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "36": {
      "op": "bz main_bare_routing@8",
      "stack_out": []
    },
    "39": {
      "op": "pushbytes 0x87e8ec8b // method \"issueReport(string,string)string\"",
      "defined_out": [
        "Method(issueReport(string,string)string)"
      ],
      "stack_out": [
        "Method(issueReport(string,string)string)"
      ]
    },
    "45": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(issueReport(string,string)string)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(issueReport(string,string)string)",
        "tmp%2#0"
      ]
    },
    "48": {
      "op": "match main_issueReport_route@5",
      "stack_out": []
    },
    "52": {
      "block": "main_after_if_else@12",
      "stack_in": [],
      "op": "pushint 0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "54": {
      "op": "return",
      "stack_out": []
    },
    "55": {
      "block": "main_issueReport_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "57": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "58": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "59": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "61": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "62": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "65": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "68": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "71": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "74": {
      "callsub": "smart_contracts/hello_world/contract.algo.ts::MedicalReport.issueReport",
      "op": "callsub issueReport",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "77": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "78": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "79": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "as_bytes%0#0"
      ]
    },
    "80": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length_uint16%0#0"
      ]
    },
    "83": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ]
    },
    "84": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "85": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "91": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "92": {
      "op": "concat",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "93": {
      "op": "log",
      "stack_out": []
    },
    "94": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "96": {
      "op": "return",
      "stack_out": []
    },
    "97": {
      "block": "main_bare_routing@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "99": {
      "op": "bnz main_after_if_else@12",
      "stack_out": []
    },
    "102": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "104": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "105": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "106": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "108": {
      "op": "return",
      "stack_out": []
    },
    "109": {
      "subroutine": "smart_contracts/hello_world/contract.algo.ts::MedicalReport.issueReport",
      "params": {
        "name#0": "bytes",
        "rep#0": "bytes"
      },
      "block": "issueReport",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "112": {
      "op": "bytec_0 // \"patient\"",
      "defined_out": [
        "\"patient\""
      ],
      "stack_out": [
        "\"patient\""
      ]
    },
    "113": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"patient\"",
        "name#0 (copy)"
      ],
      "stack_out": [
        "\"patient\"",
        "name#0 (copy)"
      ]
    },
    "115": {
      "op": "app_global_put",
      "stack_out": []
    },
    "116": {
      "op": "bytec_2 // \"report\"",
      "defined_out": [
        "\"report\""
      ],
      "stack_out": [
        "\"report\""
      ]
    },
    "117": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"report\"",
        "rep#0 (copy)"
      ],
      "stack_out": [
        "\"report\"",
        "rep#0 (copy)"
      ]
    },
    "119": {
      "op": "app_global_put",
      "stack_out": []
    },
    "120": {
      "op": "pushbytes \"Medical report issued for \"",
      "defined_out": [
        "\"Medical report issued for \""
      ],
      "stack_out": [
        "\"Medical report issued for \""
      ]
    },
    "148": {
      "op": "frame_dig -2",
      "stack_out": [
        "\"Medical report issued for \"",
        "name#0 (copy)"
      ]
    },
    "150": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "151": {
      "retsub": true,
      "op": "retsub"
    }
  }
}